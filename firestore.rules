rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can read/write their own profile and read public profiles
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || resource.data.isPublic == true);
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Friend requests collection
    match /friendRequests/{requestId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.fromUid;
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.fromUid || request.auth.uid == resource.data.toUid);
      // Allow delete for both sender and recipient
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.fromUid || request.auth.uid == resource.data.toUid);
    }
    
    // User's friends subcollection
    match /users/{userId}/friends/{friendId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Playlists collection
    match /playlists/{playlistId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.ownerId;
      allow read, write: if request.auth != null && 
        (resource.data.ownerId == request.auth.uid || 
         request.auth.uid in resource.data.collaborators);
    }
    
    // Songs subcollection within playlists
    match /playlists/{playlistId}/songs/{songId} {
      allow read, write: if request.auth != null && 
        (get(/databases/$(database)/documents/playlists/$(playlistId)).data.ownerId == request.auth.uid || 
         request.auth.uid in get(/databases/$(database)/documents/playlists/$(playlistId)).data.collaborators);
    }
    
    // Test collection for debugging (allow authenticated users to write)
    match /test/{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}
